# Optimized Multi-Stage Dockerfile for Production
# Reduces image size by ~75% and improves build caching

# ============================================
# Build Stage
# ============================================
FROM rust:1.83 AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy dependency files first for better caching
COPY Cargo.toml Cargo.lock ./

# Create a dummy project to cache dependencies
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    cargo build --release && \
    rm -rf src

# Copy actual source code
COPY src ./src
COPY migrations ./migrations

# Build the actual application with cached dependencies
RUN cargo build --release && \
    strip target/release/rust-backend-starter

# ============================================
# Runtime Stage - Distroless for minimal size
# ============================================
FROM gcr.io/distroless/cc-debian12

WORKDIR /app

# Copy compiled binary and migrations from builder
COPY --from=builder /app/target/release/rust-backend-starter /app/
COPY --from=builder /app/migrations /app/migrations

# Distroless automatically runs as nonroot user
EXPOSE 8000

CMD ["./rust-backend-starter"]
